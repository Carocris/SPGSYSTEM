@model IEnumerable<Application.ViewModels.Product.ProductViewModel>

@{
    ViewData["Title"] = "Gestión de Productos";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="h2 text-primary mb-1">
                    <i class="fas fa-box-open me-2"></i>Gestión de Productos
                </h2>
                <p class="text-muted mb-0">Administra tu inventario de productos</p>
            </div>
            <a asp-action="CreateEdit" class="btn btn-success btn-lg">
                <i class="fas fa-plus me-2"></i>Nuevo Producto
            </a>
        </div>

        <!-- Search and Filter Section -->
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-light">
                                <i class="fas fa-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control" id="searchInput" placeholder="Buscar productos...">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="categoryFilter">
                            <option value="">Todas las categorías</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="supplierFilter">
                            <option value="">Todos los proveedores</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="stockFilter">
                            <option value="available" selected>En stock</option>
                            <option value="all">Todos los stocks</option>
                            <option value="low">Stock bajo</option>
                            <option value="out">Sin stock</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="priceFilter">
                            <option value="">Todos los precios</option>
                            <option value="low">$0 - $50</option>
                            <option value="medium">$50 - $200</option>
                            <option value="high">$200+</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            <!-- Products Grid -->
            <div class="row" id="productsContainer">
                @foreach (var product in Model)
                {
                    <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12 mb-4 product-card" 
                         data-name="@product.Name.ToLower()" 
                         data-price="@product.SalePrice" 
                         data-stock="@product.Stock"
                         data-category="@(product.CategoryName?.ToLower() ?? "")"
                         data-supplier="@(product.SupplierName?.ToLower() ?? "")">
                        <div class="card h-100 shadow-sm border-0 product-item">
                            <div class="card-header bg-gradient bg-primary text-white py-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="flex-grow-1">
                                        <h6 class="card-title mb-0 fw-bold text-truncate" title="@product.Name">
                                            @product.Name
                                        </h6>
                                        <small class="text-light opacity-75">Código: @product.Code</small>
                                    </div>
                                    <span class="badge @product.StockBadgeClass">@product.StockStatus</span>
                                </div>
                            </div>
                            
                            <div class="card-body d-flex flex-column">
                                <!-- Información de categoría y proveedor -->
                                <div class="mb-2">
                                    @if (!string.IsNullOrWhiteSpace(product.CategoryName))
                                    {
                                        <span class="badge bg-secondary me-1">
                                            <i class="fas fa-tag me-1"></i>@product.CategoryName
                                        </span>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(product.SupplierName))
                                    {
                                        <span class="badge bg-info">
                                            <i class="fas fa-truck me-1"></i>@product.SupplierName
                                        </span>
                                    }
                                </div>

                                <div class="mb-3 flex-grow-1">
                                    @if (!string.IsNullOrEmpty(product.Description))
                                    {
                                        <p class="card-text text-muted small mb-2" style="height: 40px; overflow: hidden;">
                                            @product.Description
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="card-text text-muted small mb-2" style="height: 40px;">
                                            <em>Sin descripción disponible</em>
                                        </p>
                                    }
                                </div>
                                
                                <div class="product-details">
                                    <div class="row mb-3">
                                        <div class="col-6">
                                            <div class="text-center p-2 bg-light rounded">
                                                <small class="text-muted d-block">Precio Venta</small>
                                                <span class="h6 text-success fw-bold mb-0">
                                                    $@product.SalePrice.ToString("N2")
                                                </span>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="text-center p-2 bg-light rounded">
                                                <small class="text-muted d-block">Stock</small>
                                                <span class="h6 fw-bold mb-0 @(product.IsLowStock ? "text-warning" : product.Stock <= 0 ? "text-danger" : "text-primary")">
                                                    @product.Stock
                                                    @if (!string.IsNullOrWhiteSpace(product.UnitOfMeasure))
                                                    {
                                                        <small class="text-muted">@product.UnitOfMeasure</small>
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Información adicional -->
                                    <div class="row mb-2">
                                        <div class="col-6">
                                            <small class="text-muted">Compra: $@product.PurchasePrice.ToString("N2")</small>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Margen: @product.ProfitMargin.ToString("P1")</small>
                                        </div>
                                    </div>
                                    
                                    @if (product.IsLowStock)
                                    {
                                        <div class="alert alert-warning py-1 px-2 mb-2">
                                            <small><i class="fas fa-exclamation-triangle me-1"></i>Stock mínimo: @product.MinimumStock</small>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <div class="card-footer bg-transparent border-0 pt-0">
                                <div class="d-grid gap-2">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@product.Id" 
                                           class="btn btn-outline-primary btn-sm" title="Ver detalles">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-action="CreateEdit" asp-route-id="@product.Id" 
                                           class="btn btn-outline-warning btn-sm" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                title="Eliminar" onclick="confirmDelete(@product.Id, '@product.Name')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination (if needed) -->
            <nav aria-label="Productos pagination" class="mt-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="text-muted">
                        <small>Mostrando @Model.Count() productos</small>
                    </div>
                    <!-- Aquí puedes agregar paginación si es necesario -->
                </div>
            </nav>
        }
        else
        {
            <!-- Empty State -->
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="fas fa-box-open text-muted" style="font-size: 4rem;"></i>
                </div>
                <h4 class="text-muted mb-3">No hay productos registrados</h4>
                <p class="text-muted mb-4">Comienza agregando tu primer producto al sistema</p>
                <a asp-action="CreateEdit" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>Agregar Primer Producto
                </a>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirmar Eliminación
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">¿Estás seguro de que deseas eliminar el producto:</p>
                <div class="alert alert-warning">
                    <strong id="productNameToDelete"></strong>
                </div>
                <p class="text-muted mb-0">Esta acción no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <form asp-action="Delete" method="post" class="d-inline">
                    <input type="hidden" id="deleteProductId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Eliminar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        $(document).ready(function() {
            loadCategoriesAndSuppliers();
            
            // Filter event handlers
            $('#searchInput, #categoryFilter, #supplierFilter, #stockFilter, #priceFilter').on('input change', function() {
                filterProducts();
            });
        });

        function loadCategoriesAndSuppliers() {
            // Load categories
            fetch('@Url.Action("GetActive", "Categories")')
                .then(response => response.json())
                .then(data => {
                    const categorySelect = document.getElementById('categoryFilter');
                    data.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.name.toLowerCase();
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading categories:', error));

            // Load suppliers
            fetch('@Url.Action("GetActive", "Suppliers")')
                .then(response => response.json())
                .then(data => {
                    const supplierSelect = document.getElementById('supplierFilter');
                    data.forEach(supplier => {
                        const option = document.createElement('option');
                        option.value = supplier.name.toLowerCase();
                        option.textContent = supplier.name;
                        supplierSelect.appendChild(option);
                    });
                })
                .catch(error => console.error('Error loading suppliers:', error));
        }

        function filterProducts() {
            const searchTerm = $('#searchInput').val().toLowerCase();
            const categoryFilter = $('#categoryFilter').val();
            const supplierFilter = $('#supplierFilter').val();
            const stockFilter = $('#stockFilter').val();
            const priceFilter = $('#priceFilter').val();
            const products = $('.product-card');

            products.each(function() {
                const $product = $(this);
                const name = $product.data('name');
                const price = parseFloat($product.data('price'));
                const stock = parseInt($product.data('stock'));
                const category = $product.data('category');
                const supplier = $product.data('supplier');

                let showProduct = true;

                // Search filter
                if (searchTerm && !name.includes(searchTerm)) {
                    showProduct = false;
                }

                // Category filter
                if (categoryFilter && category !== categoryFilter) {
                    showProduct = false;
                }

                // Supplier filter
                if (supplierFilter && supplier !== supplierFilter) {
                    showProduct = false;
                }

                // Stock filter
                if (stockFilter) {
                    switch(stockFilter) {
                        case 'available':
                            if (stock <= 0) showProduct = false;
                            break;
                        case 'low':
                            if (stock > 5 || stock <= 0) showProduct = false;
                            break;
                        case 'out':
                            if (stock > 0) showProduct = false;
                            break;
                    }
                }

                // Price filter
                if (priceFilter) {
                    switch(priceFilter) {
                        case 'low':
                            if (price > 50) showProduct = false;
                            break;
                        case 'medium':
                            if (price <= 50 || price > 200) showProduct = false;
                            break;
                        case 'high':
                            if (price <= 200) showProduct = false;
                            break;
                    }
                }

                $product.toggle(showProduct);
            });
        }

        function confirmDelete(productId, productName) {
            $('#deleteProductId').val(productId);
            $('#productNameToDelete').text(productName);
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // Add hover effects
        $('.product-item').hover(
            function() {
                $(this).css('transform', 'translateY(-5px)').addClass('shadow-lg');
            },
            function() {
                $(this).css('transform', 'translateY(0)').removeClass('shadow-lg');
            }
        );

        // Apply default filter on page load (hide out of stock products)
        filterProducts();
    </script>

    <style>
        .product-item {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card-header.bg-gradient {
            background: linear-gradient(45deg, #0d6efd, #0a58ca) !important;
        }

        .btn-group .btn {
            border-radius: 0;
        }

        .btn-group .btn:first-child {
            border-top-left-radius: 0.375rem;
            border-bottom-left-radius: 0.375rem;
        }

        .btn-group .btn:last-child {
            border-top-right-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }

        .product-details .bg-light {
            border: 1px solid #e9ecef;
        }

        .badge {
            font-size: 0.65em;
        }

        @@media (max-width: 768px) {
            .product-card {
                margin-bottom: 1rem;
            }
        }
    </style>
}
